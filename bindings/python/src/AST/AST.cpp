/*
 * Copyright (c) 2023 Trail of Bits, Inc.
 */

// This file is auto-generated.

#include <nanobind/nanobind.h>

namespace pasta {
namespace nb = nanobind;

void RegisterAllAST(nb::module_ &m) {
void RegisterEnums(nb::module_ &m);
  RegisterEnums(m);
void RegisterAttr(nb::module_ &m);
  RegisterAttr(m);
void RegisterBuiltinAliasAttr(nb::module_ &m);
  RegisterBuiltinAliasAttr(m);
void RegisterCalledOnceAttr(nb::module_ &m);
  RegisterCalledOnceAttr(m);
void RegisterIFuncAttr(nb::module_ &m);
  RegisterIFuncAttr(m);
void RegisterInheritableAttr(nb::module_ &m);
  RegisterInheritableAttr(m);
void RegisterInheritableParamAttr(nb::module_ &m);
  RegisterInheritableParamAttr(m);
void RegisterInitPriorityAttr(nb::module_ &m);
  RegisterInitPriorityAttr(m);
void RegisterInitSegAttr(nb::module_ &m);
  RegisterInitSegAttr(m);
void RegisterIntelOclBiccAttr(nb::module_ &m);
  RegisterIntelOclBiccAttr(m);
void RegisterInternalLinkageAttr(nb::module_ &m);
  RegisterInternalLinkageAttr(m);
void RegisterLTOVisibilityPublicAttr(nb::module_ &m);
  RegisterLTOVisibilityPublicAttr(m);
void RegisterLayoutVersionAttr(nb::module_ &m);
  RegisterLayoutVersionAttr(m);
void RegisterLeafAttr(nb::module_ &m);
  RegisterLeafAttr(m);
void RegisterLifetimeBoundAttr(nb::module_ &m);
  RegisterLifetimeBoundAttr(m);
void RegisterLoaderUninitializedAttr(nb::module_ &m);
  RegisterLoaderUninitializedAttr(m);
void RegisterLockReturnedAttr(nb::module_ &m);
  RegisterLockReturnedAttr(m);
void RegisterLocksExcludedAttr(nb::module_ &m);
  RegisterLocksExcludedAttr(m);
void RegisterLoopHintAttr(nb::module_ &m);
  RegisterLoopHintAttr(m);
void RegisterM68kInterruptAttr(nb::module_ &m);
  RegisterM68kInterruptAttr(m);
void RegisterMIGServerRoutineAttr(nb::module_ &m);
  RegisterMIGServerRoutineAttr(m);
void RegisterMSABIAttr(nb::module_ &m);
  RegisterMSABIAttr(m);
void RegisterMSAllocatorAttr(nb::module_ &m);
  RegisterMSAllocatorAttr(m);
void RegisterMSInheritanceAttr(nb::module_ &m);
  RegisterMSInheritanceAttr(m);
void RegisterMSNoVTableAttr(nb::module_ &m);
  RegisterMSNoVTableAttr(m);
void RegisterMSP430InterruptAttr(nb::module_ &m);
  RegisterMSP430InterruptAttr(m);
void RegisterMSStructAttr(nb::module_ &m);
  RegisterMSStructAttr(m);
void RegisterMSVtorDispAttr(nb::module_ &m);
  RegisterMSVtorDispAttr(m);
void RegisterMaxFieldAlignmentAttr(nb::module_ &m);
  RegisterMaxFieldAlignmentAttr(m);
void RegisterMayAliasAttr(nb::module_ &m);
  RegisterMayAliasAttr(m);
void RegisterMaybeUndefAttr(nb::module_ &m);
  RegisterMaybeUndefAttr(m);
void RegisterMicroMipsAttr(nb::module_ &m);
  RegisterMicroMipsAttr(m);
void RegisterMinSizeAttr(nb::module_ &m);
  RegisterMinSizeAttr(m);
void RegisterMinVectorWidthAttr(nb::module_ &m);
  RegisterMinVectorWidthAttr(m);
void RegisterMips16Attr(nb::module_ &m);
  RegisterMips16Attr(m);
void RegisterMipsInterruptAttr(nb::module_ &m);
  RegisterMipsInterruptAttr(m);
void RegisterMipsLongCallAttr(nb::module_ &m);
  RegisterMipsLongCallAttr(m);
void RegisterMipsShortCallAttr(nb::module_ &m);
  RegisterMipsShortCallAttr(m);
void RegisterModeAttr(nb::module_ &m);
  RegisterModeAttr(m);
void RegisterNSConsumedAttr(nb::module_ &m);
  RegisterNSConsumedAttr(m);
void RegisterNSConsumesSelfAttr(nb::module_ &m);
  RegisterNSConsumesSelfAttr(m);
void RegisterNSErrorDomainAttr(nb::module_ &m);
  RegisterNSErrorDomainAttr(m);
void RegisterNSReturnsAutoreleasedAttr(nb::module_ &m);
  RegisterNSReturnsAutoreleasedAttr(m);
void RegisterNSReturnsNotRetainedAttr(nb::module_ &m);
  RegisterNSReturnsNotRetainedAttr(m);
void RegisterNSReturnsRetainedAttr(nb::module_ &m);
  RegisterNSReturnsRetainedAttr(m);
void RegisterNVPTXKernelAttr(nb::module_ &m);
  RegisterNVPTXKernelAttr(m);
void RegisterNakedAttr(nb::module_ &m);
  RegisterNakedAttr(m);
void RegisterNoAliasAttr(nb::module_ &m);
  RegisterNoAliasAttr(m);
void RegisterNoBuiltinAttr(nb::module_ &m);
  RegisterNoBuiltinAttr(m);
void RegisterNoCommonAttr(nb::module_ &m);
  RegisterNoCommonAttr(m);
void RegisterNoDebugAttr(nb::module_ &m);
  RegisterNoDebugAttr(m);
void RegisterNoDestroyAttr(nb::module_ &m);
  RegisterNoDestroyAttr(m);
void RegisterNoDuplicateAttr(nb::module_ &m);
  RegisterNoDuplicateAttr(m);
void RegisterNoEscapeAttr(nb::module_ &m);
  RegisterNoEscapeAttr(m);
void RegisterNoInstrumentFunctionAttr(nb::module_ &m);
  RegisterNoInstrumentFunctionAttr(m);
void RegisterNoMicroMipsAttr(nb::module_ &m);
  RegisterNoMicroMipsAttr(m);
void RegisterNoMips16Attr(nb::module_ &m);
  RegisterNoMips16Attr(m);
void RegisterNoProfileFunctionAttr(nb::module_ &m);
  RegisterNoProfileFunctionAttr(m);
void RegisterNoRandomizeLayoutAttr(nb::module_ &m);
  RegisterNoRandomizeLayoutAttr(m);
void RegisterNoReturnAttr(nb::module_ &m);
  RegisterNoReturnAttr(m);
void RegisterNoSanitizeAttr(nb::module_ &m);
  RegisterNoSanitizeAttr(m);
void RegisterNoSpeculativeLoadHardeningAttr(nb::module_ &m);
  RegisterNoSpeculativeLoadHardeningAttr(m);
void RegisterNoSplitStackAttr(nb::module_ &m);
  RegisterNoSplitStackAttr(m);
void RegisterNoStackProtectorAttr(nb::module_ &m);
  RegisterNoStackProtectorAttr(m);
void RegisterNoThreadSafetyAnalysisAttr(nb::module_ &m);
  RegisterNoThreadSafetyAnalysisAttr(m);
void RegisterNoThrowAttr(nb::module_ &m);
  RegisterNoThrowAttr(m);
void RegisterNoUniqueAddressAttr(nb::module_ &m);
  RegisterNoUniqueAddressAttr(m);
void RegisterNoUwtableAttr(nb::module_ &m);
  RegisterNoUwtableAttr(m);
void RegisterNonNullAttr(nb::module_ &m);
  RegisterNonNullAttr(m);
void RegisterNotTailCalledAttr(nb::module_ &m);
  RegisterNotTailCalledAttr(m);
void RegisterOMPAllocateDeclAttr(nb::module_ &m);
  RegisterOMPAllocateDeclAttr(m);
void RegisterOMPCaptureKindAttr(nb::module_ &m);
  RegisterOMPCaptureKindAttr(m);
void RegisterOMPCaptureNoInitAttr(nb::module_ &m);
  RegisterOMPCaptureNoInitAttr(m);
void RegisterOMPDeclareSimdDeclAttr(nb::module_ &m);
  RegisterOMPDeclareSimdDeclAttr(m);
void RegisterOMPDeclareTargetDeclAttr(nb::module_ &m);
  RegisterOMPDeclareTargetDeclAttr(m);
void RegisterOMPDeclareVariantAttr(nb::module_ &m);
  RegisterOMPDeclareVariantAttr(m);
void RegisterOMPReferencedVarAttr(nb::module_ &m);
  RegisterOMPReferencedVarAttr(m);
void RegisterOMPThreadPrivateDeclAttr(nb::module_ &m);
  RegisterOMPThreadPrivateDeclAttr(m);
void RegisterOSConsumedAttr(nb::module_ &m);
  RegisterOSConsumedAttr(m);
void RegisterOSConsumesThisAttr(nb::module_ &m);
  RegisterOSConsumesThisAttr(m);
void RegisterOSReturnsNotRetainedAttr(nb::module_ &m);
  RegisterOSReturnsNotRetainedAttr(m);
void RegisterOSReturnsRetainedAttr(nb::module_ &m);
  RegisterOSReturnsRetainedAttr(m);
void RegisterOSReturnsRetainedOnNonZeroAttr(nb::module_ &m);
  RegisterOSReturnsRetainedOnNonZeroAttr(m);
void RegisterOSReturnsRetainedOnZeroAttr(nb::module_ &m);
  RegisterOSReturnsRetainedOnZeroAttr(m);
void RegisterObjCBoxableAttr(nb::module_ &m);
  RegisterObjCBoxableAttr(m);
void RegisterObjCBridgeAttr(nb::module_ &m);
  RegisterObjCBridgeAttr(m);
void RegisterObjCBridgeMutableAttr(nb::module_ &m);
  RegisterObjCBridgeMutableAttr(m);
void RegisterObjCBridgeRelatedAttr(nb::module_ &m);
  RegisterObjCBridgeRelatedAttr(m);
void RegisterObjCClassStubAttr(nb::module_ &m);
  RegisterObjCClassStubAttr(m);
void RegisterObjCDesignatedInitializerAttr(nb::module_ &m);
  RegisterObjCDesignatedInitializerAttr(m);
void RegisterObjCDirectAttr(nb::module_ &m);
  RegisterObjCDirectAttr(m);
void RegisterObjCDirectMembersAttr(nb::module_ &m);
  RegisterObjCDirectMembersAttr(m);
void RegisterObjCExceptionAttr(nb::module_ &m);
  RegisterObjCExceptionAttr(m);
void RegisterObjCExplicitProtocolImplAttr(nb::module_ &m);
  RegisterObjCExplicitProtocolImplAttr(m);
void RegisterObjCExternallyRetainedAttr(nb::module_ &m);
  RegisterObjCExternallyRetainedAttr(m);
void RegisterObjCIndependentClassAttr(nb::module_ &m);
  RegisterObjCIndependentClassAttr(m);
void RegisterObjCMethodFamilyAttr(nb::module_ &m);
  RegisterObjCMethodFamilyAttr(m);
void RegisterObjCNSObjectAttr(nb::module_ &m);
  RegisterObjCNSObjectAttr(m);
void RegisterObjCNonLazyClassAttr(nb::module_ &m);
  RegisterObjCNonLazyClassAttr(m);
void RegisterObjCNonRuntimeProtocolAttr(nb::module_ &m);
  RegisterObjCNonRuntimeProtocolAttr(m);
void RegisterObjCOwnershipAttr(nb::module_ &m);
  RegisterObjCOwnershipAttr(m);
void RegisterObjCPreciseLifetimeAttr(nb::module_ &m);
  RegisterObjCPreciseLifetimeAttr(m);
void RegisterObjCRequiresPropertyDefsAttr(nb::module_ &m);
  RegisterObjCRequiresPropertyDefsAttr(m);
void RegisterObjCRequiresSuperAttr(nb::module_ &m);
  RegisterObjCRequiresSuperAttr(m);
void RegisterObjCReturnsInnerPointerAttr(nb::module_ &m);
  RegisterObjCReturnsInnerPointerAttr(m);
void RegisterObjCRootClassAttr(nb::module_ &m);
  RegisterObjCRootClassAttr(m);
void RegisterObjCRuntimeNameAttr(nb::module_ &m);
  RegisterObjCRuntimeNameAttr(m);
void RegisterObjCRuntimeVisibleAttr(nb::module_ &m);
  RegisterObjCRuntimeVisibleAttr(m);
void RegisterObjCSubclassingRestrictedAttr(nb::module_ &m);
  RegisterObjCSubclassingRestrictedAttr(m);
void RegisterOpenCLAccessAttr(nb::module_ &m);
  RegisterOpenCLAccessAttr(m);
void RegisterOpenCLIntelReqdSubGroupSizeAttr(nb::module_ &m);
  RegisterOpenCLIntelReqdSubGroupSizeAttr(m);
void RegisterOpenCLKernelAttr(nb::module_ &m);
  RegisterOpenCLKernelAttr(m);
void RegisterOptimizeNoneAttr(nb::module_ &m);
  RegisterOptimizeNoneAttr(m);
void RegisterOverloadableAttr(nb::module_ &m);
  RegisterOverloadableAttr(m);
void RegisterOverrideAttr(nb::module_ &m);
  RegisterOverrideAttr(m);
void RegisterOwnerAttr(nb::module_ &m);
  RegisterOwnerAttr(m);
void RegisterOwnershipAttr(nb::module_ &m);
  RegisterOwnershipAttr(m);
void RegisterPackedAttr(nb::module_ &m);
  RegisterPackedAttr(m);
void RegisterParamTypestateAttr(nb::module_ &m);
  RegisterParamTypestateAttr(m);
void RegisterParameterABIAttr(nb::module_ &m);
  RegisterParameterABIAttr(m);
void RegisterPascalAttr(nb::module_ &m);
  RegisterPascalAttr(m);
void RegisterPassObjectSizeAttr(nb::module_ &m);
  RegisterPassObjectSizeAttr(m);
void RegisterPatchableFunctionEntryAttr(nb::module_ &m);
  RegisterPatchableFunctionEntryAttr(m);
void RegisterPcsAttr(nb::module_ &m);
  RegisterPcsAttr(m);
void RegisterPointerAttr(nb::module_ &m);
  RegisterPointerAttr(m);
void RegisterPragmaClangBSSSectionAttr(nb::module_ &m);
  RegisterPragmaClangBSSSectionAttr(m);
void RegisterPragmaClangDataSectionAttr(nb::module_ &m);
  RegisterPragmaClangDataSectionAttr(m);
void RegisterPragmaClangRelroSectionAttr(nb::module_ &m);
  RegisterPragmaClangRelroSectionAttr(m);
void RegisterPragmaClangRodataSectionAttr(nb::module_ &m);
  RegisterPragmaClangRodataSectionAttr(m);
void RegisterPragmaClangTextSectionAttr(nb::module_ &m);
  RegisterPragmaClangTextSectionAttr(m);
void RegisterPreferredNameAttr(nb::module_ &m);
  RegisterPreferredNameAttr(m);
void RegisterPreserveAllAttr(nb::module_ &m);
  RegisterPreserveAllAttr(m);
void RegisterPreserveMostAttr(nb::module_ &m);
  RegisterPreserveMostAttr(m);
void RegisterPtGuardedByAttr(nb::module_ &m);
  RegisterPtGuardedByAttr(m);
void RegisterPtGuardedVarAttr(nb::module_ &m);
  RegisterPtGuardedVarAttr(m);
void RegisterPureAttr(nb::module_ &m);
  RegisterPureAttr(m);
void RegisterRISCVInterruptAttr(nb::module_ &m);
  RegisterRISCVInterruptAttr(m);
void RegisterRandomizeLayoutAttr(nb::module_ &m);
  RegisterRandomizeLayoutAttr(m);
void RegisterReadOnlyPlacementAttr(nb::module_ &m);
  RegisterReadOnlyPlacementAttr(m);
void RegisterRegCallAttr(nb::module_ &m);
  RegisterRegCallAttr(m);
void RegisterReinitializesAttr(nb::module_ &m);
  RegisterReinitializesAttr(m);
void RegisterReleaseCapabilityAttr(nb::module_ &m);
  RegisterReleaseCapabilityAttr(m);
void RegisterReleaseHandleAttr(nb::module_ &m);
  RegisterReleaseHandleAttr(m);
void RegisterRenderScriptKernelAttr(nb::module_ &m);
  RegisterRenderScriptKernelAttr(m);
void RegisterReqdWorkGroupSizeAttr(nb::module_ &m);
  RegisterReqdWorkGroupSizeAttr(m);
void RegisterRequiresCapabilityAttr(nb::module_ &m);
  RegisterRequiresCapabilityAttr(m);
void RegisterRestrictAttr(nb::module_ &m);
  RegisterRestrictAttr(m);
void RegisterRetainAttr(nb::module_ &m);
  RegisterRetainAttr(m);
void RegisterReturnTypestateAttr(nb::module_ &m);
  RegisterReturnTypestateAttr(m);
void RegisterReturnsNonNullAttr(nb::module_ &m);
  RegisterReturnsNonNullAttr(m);
void RegisterReturnsTwiceAttr(nb::module_ &m);
  RegisterReturnsTwiceAttr(m);
void RegisterSYCLKernelAttr(nb::module_ &m);
  RegisterSYCLKernelAttr(m);
void RegisterSYCLSpecialClassAttr(nb::module_ &m);
  RegisterSYCLSpecialClassAttr(m);
void RegisterScopedLockableAttr(nb::module_ &m);
  RegisterScopedLockableAttr(m);
void RegisterSectionAttr(nb::module_ &m);
  RegisterSectionAttr(m);
void RegisterSelectAnyAttr(nb::module_ &m);
  RegisterSelectAnyAttr(m);
void RegisterSentinelAttr(nb::module_ &m);
  RegisterSentinelAttr(m);
void RegisterSetTypestateAttr(nb::module_ &m);
  RegisterSetTypestateAttr(m);
void RegisterSharedTrylockFunctionAttr(nb::module_ &m);
  RegisterSharedTrylockFunctionAttr(m);
void RegisterSpeculativeLoadHardeningAttr(nb::module_ &m);
  RegisterSpeculativeLoadHardeningAttr(m);
void RegisterStandaloneDebugAttr(nb::module_ &m);
  RegisterStandaloneDebugAttr(m);
void RegisterStdCallAttr(nb::module_ &m);
  RegisterStdCallAttr(m);
void RegisterStmtAttr(nb::module_ &m);
  RegisterStmtAttr(m);
void RegisterStrictFPAttr(nb::module_ &m);
  RegisterStrictFPAttr(m);
void RegisterStrictGuardStackCheckAttr(nb::module_ &m);
  RegisterStrictGuardStackCheckAttr(m);
void RegisterSuppressAttr(nb::module_ &m);
  RegisterSuppressAttr(m);
void RegisterSwiftAsyncAttr(nb::module_ &m);
  RegisterSwiftAsyncAttr(m);
void RegisterSwiftAsyncCallAttr(nb::module_ &m);
  RegisterSwiftAsyncCallAttr(m);
void RegisterSwiftAsyncContextAttr(nb::module_ &m);
  RegisterSwiftAsyncContextAttr(m);
void RegisterSwiftAsyncErrorAttr(nb::module_ &m);
  RegisterSwiftAsyncErrorAttr(m);
void RegisterSwiftAsyncNameAttr(nb::module_ &m);
  RegisterSwiftAsyncNameAttr(m);
void RegisterSwiftAttrAttr(nb::module_ &m);
  RegisterSwiftAttrAttr(m);
void RegisterSwiftBridgeAttr(nb::module_ &m);
  RegisterSwiftBridgeAttr(m);
void RegisterSwiftBridgedTypedefAttr(nb::module_ &m);
  RegisterSwiftBridgedTypedefAttr(m);
void RegisterSwiftCallAttr(nb::module_ &m);
  RegisterSwiftCallAttr(m);
void RegisterSwiftContextAttr(nb::module_ &m);
  RegisterSwiftContextAttr(m);
void RegisterSwiftErrorAttr(nb::module_ &m);
  RegisterSwiftErrorAttr(m);
void RegisterSwiftErrorResultAttr(nb::module_ &m);
  RegisterSwiftErrorResultAttr(m);
void RegisterSwiftIndirectResultAttr(nb::module_ &m);
  RegisterSwiftIndirectResultAttr(m);
void RegisterSwiftNameAttr(nb::module_ &m);
  RegisterSwiftNameAttr(m);
void RegisterSwiftNewTypeAttr(nb::module_ &m);
  RegisterSwiftNewTypeAttr(m);
void RegisterSwiftObjCMembersAttr(nb::module_ &m);
  RegisterSwiftObjCMembersAttr(m);
void RegisterSwiftPrivateAttr(nb::module_ &m);
  RegisterSwiftPrivateAttr(m);
void RegisterSysVABIAttr(nb::module_ &m);
  RegisterSysVABIAttr(m);
void RegisterTLSModelAttr(nb::module_ &m);
  RegisterTLSModelAttr(m);
void RegisterTargetAttr(nb::module_ &m);
  RegisterTargetAttr(m);
void RegisterTargetClonesAttr(nb::module_ &m);
  RegisterTargetClonesAttr(m);
void RegisterTargetVersionAttr(nb::module_ &m);
  RegisterTargetVersionAttr(m);
void RegisterTestTypestateAttr(nb::module_ &m);
  RegisterTestTypestateAttr(m);
void RegisterThisCallAttr(nb::module_ &m);
  RegisterThisCallAttr(m);
void RegisterThreadAttr(nb::module_ &m);
  RegisterThreadAttr(m);
void RegisterTransparentUnionAttr(nb::module_ &m);
  RegisterTransparentUnionAttr(m);
void RegisterTrivialABIAttr(nb::module_ &m);
  RegisterTrivialABIAttr(m);
void RegisterTryAcquireCapabilityAttr(nb::module_ &m);
  RegisterTryAcquireCapabilityAttr(m);
void RegisterTypeAttr(nb::module_ &m);
  RegisterTypeAttr(m);
void RegisterTypeNonNullAttr(nb::module_ &m);
  RegisterTypeNonNullAttr(m);
void RegisterTypeNullUnspecifiedAttr(nb::module_ &m);
  RegisterTypeNullUnspecifiedAttr(m);
void RegisterTypeNullableAttr(nb::module_ &m);
  RegisterTypeNullableAttr(m);
void RegisterTypeNullableResultAttr(nb::module_ &m);
  RegisterTypeNullableResultAttr(m);
void RegisterTypeTagForDatatypeAttr(nb::module_ &m);
  RegisterTypeTagForDatatypeAttr(m);
void RegisterTypeVisibilityAttr(nb::module_ &m);
  RegisterTypeVisibilityAttr(m);
void RegisterUPtrAttr(nb::module_ &m);
  RegisterUPtrAttr(m);
void RegisterUnavailableAttr(nb::module_ &m);
  RegisterUnavailableAttr(m);
void RegisterUninitializedAttr(nb::module_ &m);
  RegisterUninitializedAttr(m);
void RegisterUnlikelyAttr(nb::module_ &m);
  RegisterUnlikelyAttr(m);
void RegisterUnsafeBufferUsageAttr(nb::module_ &m);
  RegisterUnsafeBufferUsageAttr(m);
void RegisterUnusedAttr(nb::module_ &m);
  RegisterUnusedAttr(m);
void RegisterUseHandleAttr(nb::module_ &m);
  RegisterUseHandleAttr(m);
void RegisterUsedAttr(nb::module_ &m);
  RegisterUsedAttr(m);
void RegisterUsingIfExistsAttr(nb::module_ &m);
  RegisterUsingIfExistsAttr(m);
void RegisterUuidAttr(nb::module_ &m);
  RegisterUuidAttr(m);
void RegisterVecReturnAttr(nb::module_ &m);
  RegisterVecReturnAttr(m);
void RegisterVecTypeHintAttr(nb::module_ &m);
  RegisterVecTypeHintAttr(m);
void RegisterVectorCallAttr(nb::module_ &m);
  RegisterVectorCallAttr(m);
void RegisterVisibilityAttr(nb::module_ &m);
  RegisterVisibilityAttr(m);
void RegisterWarnUnusedAttr(nb::module_ &m);
  RegisterWarnUnusedAttr(m);
void RegisterWarnUnusedResultAttr(nb::module_ &m);
  RegisterWarnUnusedResultAttr(m);
void RegisterWeakAttr(nb::module_ &m);
  RegisterWeakAttr(m);
void RegisterWeakImportAttr(nb::module_ &m);
  RegisterWeakImportAttr(m);
void RegisterWeakRefAttr(nb::module_ &m);
  RegisterWeakRefAttr(m);
void RegisterWebAssemblyExportNameAttr(nb::module_ &m);
  RegisterWebAssemblyExportNameAttr(m);
void RegisterWebAssemblyFuncrefAttr(nb::module_ &m);
  RegisterWebAssemblyFuncrefAttr(m);
void RegisterWebAssemblyImportModuleAttr(nb::module_ &m);
  RegisterWebAssemblyImportModuleAttr(m);
void RegisterWebAssemblyImportNameAttr(nb::module_ &m);
  RegisterWebAssemblyImportNameAttr(m);
void RegisterWorkGroupSizeHintAttr(nb::module_ &m);
  RegisterWorkGroupSizeHintAttr(m);
void RegisterX86ForceAlignArgPointerAttr(nb::module_ &m);
  RegisterX86ForceAlignArgPointerAttr(m);
void RegisterXRayInstrumentAttr(nb::module_ &m);
  RegisterXRayInstrumentAttr(m);
void RegisterXRayLogArgsAttr(nb::module_ &m);
  RegisterXRayLogArgsAttr(m);
void RegisterZeroCallUsedRegsAttr(nb::module_ &m);
  RegisterZeroCallUsedRegsAttr(m);
void RegisterAArch64SVEPcsAttr(nb::module_ &m);
  RegisterAArch64SVEPcsAttr(m);
void RegisterAArch64VectorPcsAttr(nb::module_ &m);
  RegisterAArch64VectorPcsAttr(m);
void RegisterAMDGPUFlatWorkGroupSizeAttr(nb::module_ &m);
  RegisterAMDGPUFlatWorkGroupSizeAttr(m);
void RegisterAMDGPUKernelCallAttr(nb::module_ &m);
  RegisterAMDGPUKernelCallAttr(m);
void RegisterAMDGPUNumSGPRAttr(nb::module_ &m);
  RegisterAMDGPUNumSGPRAttr(m);
void RegisterAMDGPUNumVGPRAttr(nb::module_ &m);
  RegisterAMDGPUNumVGPRAttr(m);
void RegisterAMDGPUWavesPerEUAttr(nb::module_ &m);
  RegisterAMDGPUWavesPerEUAttr(m);
void RegisterARMInterruptAttr(nb::module_ &m);
  RegisterARMInterruptAttr(m);
void RegisterAVRInterruptAttr(nb::module_ &m);
  RegisterAVRInterruptAttr(m);
void RegisterAVRSignalAttr(nb::module_ &m);
  RegisterAVRSignalAttr(m);
void RegisterAbiTagAttr(nb::module_ &m);
  RegisterAbiTagAttr(m);
void RegisterAcquireCapabilityAttr(nb::module_ &m);
  RegisterAcquireCapabilityAttr(m);
void RegisterAcquireHandleAttr(nb::module_ &m);
  RegisterAcquireHandleAttr(m);
void RegisterAcquiredAfterAttr(nb::module_ &m);
  RegisterAcquiredAfterAttr(m);
void RegisterAcquiredBeforeAttr(nb::module_ &m);
  RegisterAcquiredBeforeAttr(m);
void RegisterAddressSpaceAttr(nb::module_ &m);
  RegisterAddressSpaceAttr(m);
void RegisterAliasAttr(nb::module_ &m);
  RegisterAliasAttr(m);
void RegisterAlignMac68kAttr(nb::module_ &m);
  RegisterAlignMac68kAttr(m);
void RegisterAlignNaturalAttr(nb::module_ &m);
  RegisterAlignNaturalAttr(m);
void RegisterAlignValueAttr(nb::module_ &m);
  RegisterAlignValueAttr(m);
void RegisterAlignedAttr(nb::module_ &m);
  RegisterAlignedAttr(m);
void RegisterAllocAlignAttr(nb::module_ &m);
  RegisterAllocAlignAttr(m);
void RegisterAllocSizeAttr(nb::module_ &m);
  RegisterAllocSizeAttr(m);
void RegisterAlwaysDestroyAttr(nb::module_ &m);
  RegisterAlwaysDestroyAttr(m);
void RegisterAnalyzerNoReturnAttr(nb::module_ &m);
  RegisterAnalyzerNoReturnAttr(m);
void RegisterAnnotateAttr(nb::module_ &m);
  RegisterAnnotateAttr(m);
void RegisterAnnotateTypeAttr(nb::module_ &m);
  RegisterAnnotateTypeAttr(m);
void RegisterAnyX86InterruptAttr(nb::module_ &m);
  RegisterAnyX86InterruptAttr(m);
void RegisterAnyX86NoCallerSavedRegistersAttr(nb::module_ &m);
  RegisterAnyX86NoCallerSavedRegistersAttr(m);
void RegisterAnyX86NoCfCheckAttr(nb::module_ &m);
  RegisterAnyX86NoCfCheckAttr(m);
void RegisterArcWeakrefUnavailableAttr(nb::module_ &m);
  RegisterArcWeakrefUnavailableAttr(m);
void RegisterArgumentWithTypeTagAttr(nb::module_ &m);
  RegisterArgumentWithTypeTagAttr(m);
void RegisterArmBuiltinAliasAttr(nb::module_ &m);
  RegisterArmBuiltinAliasAttr(m);
void RegisterArmMveStrictPolymorphismAttr(nb::module_ &m);
  RegisterArmMveStrictPolymorphismAttr(m);
void RegisterArmStreamingAttr(nb::module_ &m);
  RegisterArmStreamingAttr(m);
void RegisterArtificialAttr(nb::module_ &m);
  RegisterArtificialAttr(m);
void RegisterAsmLabelAttr(nb::module_ &m);
  RegisterAsmLabelAttr(m);
void RegisterAssertCapabilityAttr(nb::module_ &m);
  RegisterAssertCapabilityAttr(m);
void RegisterAssertExclusiveLockAttr(nb::module_ &m);
  RegisterAssertExclusiveLockAttr(m);
void RegisterAssertSharedLockAttr(nb::module_ &m);
  RegisterAssertSharedLockAttr(m);
void RegisterAssumeAlignedAttr(nb::module_ &m);
  RegisterAssumeAlignedAttr(m);
void RegisterAssumptionAttr(nb::module_ &m);
  RegisterAssumptionAttr(m);
void RegisterAvailabilityAttr(nb::module_ &m);
  RegisterAvailabilityAttr(m);
void RegisterAvailableOnlyInDefaultEvalMethodAttr(nb::module_ &m);
  RegisterAvailableOnlyInDefaultEvalMethodAttr(m);
void RegisterBPFPreserveAccessIndexAttr(nb::module_ &m);
  RegisterBPFPreserveAccessIndexAttr(m);
void RegisterBTFDeclTagAttr(nb::module_ &m);
  RegisterBTFDeclTagAttr(m);
void RegisterBTFTypeTagAttr(nb::module_ &m);
  RegisterBTFTypeTagAttr(m);
void RegisterBlocksAttr(nb::module_ &m);
  RegisterBlocksAttr(m);
void RegisterBuiltinAttr(nb::module_ &m);
  RegisterBuiltinAttr(m);
void RegisterC11NoReturnAttr(nb::module_ &m);
  RegisterC11NoReturnAttr(m);
void RegisterCDeclAttr(nb::module_ &m);
  RegisterCDeclAttr(m);
void RegisterCFAuditedTransferAttr(nb::module_ &m);
  RegisterCFAuditedTransferAttr(m);
void RegisterCFConsumedAttr(nb::module_ &m);
  RegisterCFConsumedAttr(m);
void RegisterCFGuardAttr(nb::module_ &m);
  RegisterCFGuardAttr(m);
void RegisterCFICanonicalJumpTableAttr(nb::module_ &m);
  RegisterCFICanonicalJumpTableAttr(m);
void RegisterCFReturnsNotRetainedAttr(nb::module_ &m);
  RegisterCFReturnsNotRetainedAttr(m);
void RegisterCFReturnsRetainedAttr(nb::module_ &m);
  RegisterCFReturnsRetainedAttr(m);
void RegisterCFUnknownTransferAttr(nb::module_ &m);
  RegisterCFUnknownTransferAttr(m);
void RegisterCPUDispatchAttr(nb::module_ &m);
  RegisterCPUDispatchAttr(m);
void RegisterCPUSpecificAttr(nb::module_ &m);
  RegisterCPUSpecificAttr(m);
void RegisterCUDAConstantAttr(nb::module_ &m);
  RegisterCUDAConstantAttr(m);
void RegisterCUDADeviceAttr(nb::module_ &m);
  RegisterCUDADeviceAttr(m);
void RegisterCUDADeviceBuiltinSurfaceTypeAttr(nb::module_ &m);
  RegisterCUDADeviceBuiltinSurfaceTypeAttr(m);
void RegisterCUDADeviceBuiltinTextureTypeAttr(nb::module_ &m);
  RegisterCUDADeviceBuiltinTextureTypeAttr(m);
void RegisterCUDAGlobalAttr(nb::module_ &m);
  RegisterCUDAGlobalAttr(m);
void RegisterCUDAHostAttr(nb::module_ &m);
  RegisterCUDAHostAttr(m);
void RegisterCUDAInvalidTargetAttr(nb::module_ &m);
  RegisterCUDAInvalidTargetAttr(m);
void RegisterCUDALaunchBoundsAttr(nb::module_ &m);
  RegisterCUDALaunchBoundsAttr(m);
void RegisterCUDASharedAttr(nb::module_ &m);
  RegisterCUDASharedAttr(m);
void RegisterCXX11NoReturnAttr(nb::module_ &m);
  RegisterCXX11NoReturnAttr(m);
void RegisterCallableWhenAttr(nb::module_ &m);
  RegisterCallableWhenAttr(m);
void RegisterCallbackAttr(nb::module_ &m);
  RegisterCallbackAttr(m);
void RegisterCapabilityAttr(nb::module_ &m);
  RegisterCapabilityAttr(m);
void RegisterCapturedRecordAttr(nb::module_ &m);
  RegisterCapturedRecordAttr(m);
void RegisterCarriesDependencyAttr(nb::module_ &m);
  RegisterCarriesDependencyAttr(m);
void RegisterCleanupAttr(nb::module_ &m);
  RegisterCleanupAttr(m);
void RegisterCmseNSCallAttr(nb::module_ &m);
  RegisterCmseNSCallAttr(m);
void RegisterCmseNSEntryAttr(nb::module_ &m);
  RegisterCmseNSEntryAttr(m);
void RegisterCodeSegAttr(nb::module_ &m);
  RegisterCodeSegAttr(m);
void RegisterColdAttr(nb::module_ &m);
  RegisterColdAttr(m);
void RegisterCommonAttr(nb::module_ &m);
  RegisterCommonAttr(m);
void RegisterConstAttr(nb::module_ &m);
  RegisterConstAttr(m);
void RegisterConstInitAttr(nb::module_ &m);
  RegisterConstInitAttr(m);
void RegisterConstructorAttr(nb::module_ &m);
  RegisterConstructorAttr(m);
void RegisterConsumableAttr(nb::module_ &m);
  RegisterConsumableAttr(m);
void RegisterConsumableAutoCastAttr(nb::module_ &m);
  RegisterConsumableAutoCastAttr(m);
void RegisterConsumableSetOnReadAttr(nb::module_ &m);
  RegisterConsumableSetOnReadAttr(m);
void RegisterConvergentAttr(nb::module_ &m);
  RegisterConvergentAttr(m);
void RegisterDLLExportAttr(nb::module_ &m);
  RegisterDLLExportAttr(m);
void RegisterDLLExportStaticLocalAttr(nb::module_ &m);
  RegisterDLLExportStaticLocalAttr(m);
void RegisterDLLImportAttr(nb::module_ &m);
  RegisterDLLImportAttr(m);
void RegisterDLLImportStaticLocalAttr(nb::module_ &m);
  RegisterDLLImportStaticLocalAttr(m);
void RegisterDeclOrStmtAttr(nb::module_ &m);
  RegisterDeclOrStmtAttr(m);
void RegisterDeprecatedAttr(nb::module_ &m);
  RegisterDeprecatedAttr(m);
void RegisterDestructorAttr(nb::module_ &m);
  RegisterDestructorAttr(m);
void RegisterDiagnoseAsBuiltinAttr(nb::module_ &m);
  RegisterDiagnoseAsBuiltinAttr(m);
void RegisterDiagnoseIfAttr(nb::module_ &m);
  RegisterDiagnoseIfAttr(m);
void RegisterDisableSanitizerInstrumentationAttr(nb::module_ &m);
  RegisterDisableSanitizerInstrumentationAttr(m);
void RegisterDisableTailCallsAttr(nb::module_ &m);
  RegisterDisableTailCallsAttr(m);
void RegisterEmptyBasesAttr(nb::module_ &m);
  RegisterEmptyBasesAttr(m);
void RegisterEnableIfAttr(nb::module_ &m);
  RegisterEnableIfAttr(m);
void RegisterEnforceTCBAttr(nb::module_ &m);
  RegisterEnforceTCBAttr(m);
void RegisterEnforceTCBLeafAttr(nb::module_ &m);
  RegisterEnforceTCBLeafAttr(m);
void RegisterEnumExtensibilityAttr(nb::module_ &m);
  RegisterEnumExtensibilityAttr(m);
void RegisterErrorAttr(nb::module_ &m);
  RegisterErrorAttr(m);
void RegisterExcludeFromExplicitInstantiationAttr(nb::module_ &m);
  RegisterExcludeFromExplicitInstantiationAttr(m);
void RegisterExclusiveTrylockFunctionAttr(nb::module_ &m);
  RegisterExclusiveTrylockFunctionAttr(m);
void RegisterExternalSourceSymbolAttr(nb::module_ &m);
  RegisterExternalSourceSymbolAttr(m);
void RegisterFallThroughAttr(nb::module_ &m);
  RegisterFallThroughAttr(m);
void RegisterFastCallAttr(nb::module_ &m);
  RegisterFastCallAttr(m);
void RegisterFinalAttr(nb::module_ &m);
  RegisterFinalAttr(m);
void RegisterFlagEnumAttr(nb::module_ &m);
  RegisterFlagEnumAttr(m);
void RegisterFlattenAttr(nb::module_ &m);
  RegisterFlattenAttr(m);
void RegisterFormatArgAttr(nb::module_ &m);
  RegisterFormatArgAttr(m);
void RegisterFormatAttr(nb::module_ &m);
  RegisterFormatAttr(m);
void RegisterFunctionReturnThunksAttr(nb::module_ &m);
  RegisterFunctionReturnThunksAttr(m);
void RegisterGNUInlineAttr(nb::module_ &m);
  RegisterGNUInlineAttr(m);
void RegisterGuardedByAttr(nb::module_ &m);
  RegisterGuardedByAttr(m);
void RegisterGuardedVarAttr(nb::module_ &m);
  RegisterGuardedVarAttr(m);
void RegisterHIPManagedAttr(nb::module_ &m);
  RegisterHIPManagedAttr(m);
void RegisterHLSLAnnotationAttr(nb::module_ &m);
  RegisterHLSLAnnotationAttr(m);
void RegisterHLSLGroupSharedAddressSpaceAttr(nb::module_ &m);
  RegisterHLSLGroupSharedAddressSpaceAttr(m);
void RegisterHLSLNumThreadsAttr(nb::module_ &m);
  RegisterHLSLNumThreadsAttr(m);
void RegisterHLSLResourceAttr(nb::module_ &m);
  RegisterHLSLResourceAttr(m);
void RegisterHLSLResourceBindingAttr(nb::module_ &m);
  RegisterHLSLResourceBindingAttr(m);
void RegisterHLSLSV_DispatchThreadIDAttr(nb::module_ &m);
  RegisterHLSLSV_DispatchThreadIDAttr(m);
void RegisterHLSLSV_GroupIndexAttr(nb::module_ &m);
  RegisterHLSLSV_GroupIndexAttr(m);
void RegisterHLSLShaderAttr(nb::module_ &m);
  RegisterHLSLShaderAttr(m);
void RegisterHotAttr(nb::module_ &m);
  RegisterHotAttr(m);
void RegisterIBActionAttr(nb::module_ &m);
  RegisterIBActionAttr(m);
void RegisterIBOutletAttr(nb::module_ &m);
  RegisterIBOutletAttr(m);
void RegisterIBOutletCollectionAttr(nb::module_ &m);
  RegisterIBOutletCollectionAttr(m);
void RegisterLikelyAttr(nb::module_ &m);
  RegisterLikelyAttr(m);
void RegisterMustTailAttr(nb::module_ &m);
  RegisterMustTailAttr(m);
void RegisterNoDerefAttr(nb::module_ &m);
  RegisterNoDerefAttr(m);
void RegisterNoInlineAttr(nb::module_ &m);
  RegisterNoInlineAttr(m);
void RegisterNoMergeAttr(nb::module_ &m);
  RegisterNoMergeAttr(m);
void RegisterObjCGCAttr(nb::module_ &m);
  RegisterObjCGCAttr(m);
void RegisterObjCInertUnsafeUnretainedAttr(nb::module_ &m);
  RegisterObjCInertUnsafeUnretainedAttr(m);
void RegisterObjCKindOfAttr(nb::module_ &m);
  RegisterObjCKindOfAttr(m);
void RegisterOpenCLConstantAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLConstantAddressSpaceAttr(m);
void RegisterOpenCLGenericAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLGenericAddressSpaceAttr(m);
void RegisterOpenCLGlobalAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLGlobalAddressSpaceAttr(m);
void RegisterOpenCLGlobalDeviceAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLGlobalDeviceAddressSpaceAttr(m);
void RegisterOpenCLGlobalHostAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLGlobalHostAddressSpaceAttr(m);
void RegisterOpenCLLocalAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLLocalAddressSpaceAttr(m);
void RegisterOpenCLPrivateAddressSpaceAttr(nb::module_ &m);
  RegisterOpenCLPrivateAddressSpaceAttr(m);
void RegisterOpenCLUnrollHintAttr(nb::module_ &m);
  RegisterOpenCLUnrollHintAttr(m);
void RegisterPtr32Attr(nb::module_ &m);
  RegisterPtr32Attr(m);
void RegisterPtr64Attr(nb::module_ &m);
  RegisterPtr64Attr(m);
void RegisterSPtrAttr(nb::module_ &m);
  RegisterSPtrAttr(m);
void RegisterAlwaysInlineAttr(nb::module_ &m);
  RegisterAlwaysInlineAttr(m);
void RegisterDeclContext(nb::module_ &m);
  RegisterDeclContext(m);
void RegisterDecl(nb::module_ &m);
  RegisterDecl(m);
void RegisterEmptyDecl(nb::module_ &m);
  RegisterEmptyDecl(m);
void RegisterExportDecl(nb::module_ &m);
  RegisterExportDecl(m);
void RegisterExternCContextDecl(nb::module_ &m);
  RegisterExternCContextDecl(m);
void RegisterFileScopeAsmDecl(nb::module_ &m);
  RegisterFileScopeAsmDecl(m);
void RegisterFriendDecl(nb::module_ &m);
  RegisterFriendDecl(m);
void RegisterFriendTemplateDecl(nb::module_ &m);
  RegisterFriendTemplateDecl(m);
void RegisterImplicitConceptSpecializationDecl(nb::module_ &m);
  RegisterImplicitConceptSpecializationDecl(m);
void RegisterImportDecl(nb::module_ &m);
  RegisterImportDecl(m);
void RegisterLifetimeExtendedTemporaryDecl(nb::module_ &m);
  RegisterLifetimeExtendedTemporaryDecl(m);
void RegisterLinkageSpecDecl(nb::module_ &m);
  RegisterLinkageSpecDecl(m);
void RegisterNamedDecl(nb::module_ &m);
  RegisterNamedDecl(m);
void RegisterNamespaceAliasDecl(nb::module_ &m);
  RegisterNamespaceAliasDecl(m);
void RegisterNamespaceDecl(nb::module_ &m);
  RegisterNamespaceDecl(m);
void RegisterObjCCompatibleAliasDecl(nb::module_ &m);
  RegisterObjCCompatibleAliasDecl(m);
void RegisterObjCContainerDecl(nb::module_ &m);
  RegisterObjCContainerDecl(m);
void RegisterObjCImplDecl(nb::module_ &m);
  RegisterObjCImplDecl(m);
void RegisterObjCImplementationDecl(nb::module_ &m);
  RegisterObjCImplementationDecl(m);
void RegisterObjCInterfaceDecl(nb::module_ &m);
  RegisterObjCInterfaceDecl(m);
void RegisterObjCMethodDecl(nb::module_ &m);
  RegisterObjCMethodDecl(m);
void RegisterObjCPropertyDecl(nb::module_ &m);
  RegisterObjCPropertyDecl(m);
void RegisterObjCPropertyImplDecl(nb::module_ &m);
  RegisterObjCPropertyImplDecl(m);
void RegisterObjCProtocolDecl(nb::module_ &m);
  RegisterObjCProtocolDecl(m);
void RegisterPragmaCommentDecl(nb::module_ &m);
  RegisterPragmaCommentDecl(m);
void RegisterPragmaDetectMismatchDecl(nb::module_ &m);
  RegisterPragmaDetectMismatchDecl(m);
void RegisterRequiresExprBodyDecl(nb::module_ &m);
  RegisterRequiresExprBodyDecl(m);
void RegisterStaticAssertDecl(nb::module_ &m);
  RegisterStaticAssertDecl(m);
void RegisterTemplateDecl(nb::module_ &m);
  RegisterTemplateDecl(m);
void RegisterTemplateTemplateParmDecl(nb::module_ &m);
  RegisterTemplateTemplateParmDecl(m);
void RegisterTopLevelStmtDecl(nb::module_ &m);
  RegisterTopLevelStmtDecl(m);
void RegisterTranslationUnitDecl(nb::module_ &m);
  RegisterTranslationUnitDecl(m);
void RegisterTypeDecl(nb::module_ &m);
  RegisterTypeDecl(m);
void RegisterTypedefNameDecl(nb::module_ &m);
  RegisterTypedefNameDecl(m);
void RegisterUnresolvedUsingIfExistsDecl(nb::module_ &m);
  RegisterUnresolvedUsingIfExistsDecl(m);
void RegisterUnresolvedUsingTypenameDecl(nb::module_ &m);
  RegisterUnresolvedUsingTypenameDecl(m);
void RegisterUsingDirectiveDecl(nb::module_ &m);
  RegisterUsingDirectiveDecl(m);
void RegisterUsingPackDecl(nb::module_ &m);
  RegisterUsingPackDecl(m);
void RegisterUsingShadowDecl(nb::module_ &m);
  RegisterUsingShadowDecl(m);
void RegisterValueDecl(nb::module_ &m);
  RegisterValueDecl(m);
void RegisterOMPDeclarativeDirectiveDecl(nb::module_ &m);
  RegisterOMPDeclarativeDirectiveDecl(m);
void RegisterOMPDeclarativeDirectiveValueDecl(nb::module_ &m);
  RegisterOMPDeclarativeDirectiveValueDecl(m);
void RegisterAccessSpecDecl(nb::module_ &m);
  RegisterAccessSpecDecl(m);
void RegisterBaseUsingDecl(nb::module_ &m);
  RegisterBaseUsingDecl(m);
void RegisterBindingDecl(nb::module_ &m);
  RegisterBindingDecl(m);
void RegisterBlockDecl(nb::module_ &m);
  RegisterBlockDecl(m);
void RegisterBuiltinTemplateDecl(nb::module_ &m);
  RegisterBuiltinTemplateDecl(m);
void RegisterCapturedDecl(nb::module_ &m);
  RegisterCapturedDecl(m);
void RegisterClassScopeFunctionSpecializationDecl(nb::module_ &m);
  RegisterClassScopeFunctionSpecializationDecl(m);
void RegisterConceptDecl(nb::module_ &m);
  RegisterConceptDecl(m);
void RegisterConstructorUsingShadowDecl(nb::module_ &m);
  RegisterConstructorUsingShadowDecl(m);
void RegisterDeclaratorDecl(nb::module_ &m);
  RegisterDeclaratorDecl(m);
void RegisterEnumConstantDecl(nb::module_ &m);
  RegisterEnumConstantDecl(m);
void RegisterFieldDecl(nb::module_ &m);
  RegisterFieldDecl(m);
void RegisterFunctionDecl(nb::module_ &m);
  RegisterFunctionDecl(m);
void RegisterHLSLBufferDecl(nb::module_ &m);
  RegisterHLSLBufferDecl(m);
void RegisterIndirectFieldDecl(nb::module_ &m);
  RegisterIndirectFieldDecl(m);
void RegisterLabelDecl(nb::module_ &m);
  RegisterLabelDecl(m);
void RegisterMSGuidDecl(nb::module_ &m);
  RegisterMSGuidDecl(m);
void RegisterMSPropertyDecl(nb::module_ &m);
  RegisterMSPropertyDecl(m);
void RegisterNonTypeTemplateParmDecl(nb::module_ &m);
  RegisterNonTypeTemplateParmDecl(m);
void RegisterOMPAllocateDecl(nb::module_ &m);
  RegisterOMPAllocateDecl(m);
void RegisterOMPDeclareMapperDecl(nb::module_ &m);
  RegisterOMPDeclareMapperDecl(m);
void RegisterOMPDeclareReductionDecl(nb::module_ &m);
  RegisterOMPDeclareReductionDecl(m);
void RegisterOMPRequiresDecl(nb::module_ &m);
  RegisterOMPRequiresDecl(m);
void RegisterOMPThreadPrivateDecl(nb::module_ &m);
  RegisterOMPThreadPrivateDecl(m);
void RegisterObjCAtDefsFieldDecl(nb::module_ &m);
  RegisterObjCAtDefsFieldDecl(m);
void RegisterObjCCategoryDecl(nb::module_ &m);
  RegisterObjCCategoryDecl(m);
void RegisterObjCCategoryImplDecl(nb::module_ &m);
  RegisterObjCCategoryImplDecl(m);
void RegisterObjCIvarDecl(nb::module_ &m);
  RegisterObjCIvarDecl(m);
void RegisterObjCTypeParamDecl(nb::module_ &m);
  RegisterObjCTypeParamDecl(m);
void RegisterRedeclarableTemplateDecl(nb::module_ &m);
  RegisterRedeclarableTemplateDecl(m);
void RegisterTagDecl(nb::module_ &m);
  RegisterTagDecl(m);
void RegisterTemplateParamObjectDecl(nb::module_ &m);
  RegisterTemplateParamObjectDecl(m);
void RegisterTemplateTypeParmDecl(nb::module_ &m);
  RegisterTemplateTypeParmDecl(m);
void RegisterTypeAliasDecl(nb::module_ &m);
  RegisterTypeAliasDecl(m);
void RegisterTypeAliasTemplateDecl(nb::module_ &m);
  RegisterTypeAliasTemplateDecl(m);
void RegisterTypedefDecl(nb::module_ &m);
  RegisterTypedefDecl(m);
void RegisterUnnamedGlobalConstantDecl(nb::module_ &m);
  RegisterUnnamedGlobalConstantDecl(m);
void RegisterUnresolvedUsingValueDecl(nb::module_ &m);
  RegisterUnresolvedUsingValueDecl(m);
void RegisterUsingDecl(nb::module_ &m);
  RegisterUsingDecl(m);
void RegisterUsingEnumDecl(nb::module_ &m);
  RegisterUsingEnumDecl(m);
void RegisterVarDecl(nb::module_ &m);
  RegisterVarDecl(m);
void RegisterVarTemplateDecl(nb::module_ &m);
  RegisterVarTemplateDecl(m);
void RegisterVarTemplateSpecializationDecl(nb::module_ &m);
  RegisterVarTemplateSpecializationDecl(m);
void RegisterCXXDeductionGuideDecl(nb::module_ &m);
  RegisterCXXDeductionGuideDecl(m);
void RegisterCXXMethodDecl(nb::module_ &m);
  RegisterCXXMethodDecl(m);
void RegisterClassTemplateDecl(nb::module_ &m);
  RegisterClassTemplateDecl(m);
void RegisterDecompositionDecl(nb::module_ &m);
  RegisterDecompositionDecl(m);
void RegisterEnumDecl(nb::module_ &m);
  RegisterEnumDecl(m);
void RegisterFunctionTemplateDecl(nb::module_ &m);
  RegisterFunctionTemplateDecl(m);
void RegisterImplicitParamDecl(nb::module_ &m);
  RegisterImplicitParamDecl(m);
void RegisterOMPCapturedExprDecl(nb::module_ &m);
  RegisterOMPCapturedExprDecl(m);
void RegisterParmVarDecl(nb::module_ &m);
  RegisterParmVarDecl(m);
void RegisterRecordDecl(nb::module_ &m);
  RegisterRecordDecl(m);
void RegisterVarTemplatePartialSpecializationDecl(nb::module_ &m);
  RegisterVarTemplatePartialSpecializationDecl(m);
void RegisterCXXConstructorDecl(nb::module_ &m);
  RegisterCXXConstructorDecl(m);
void RegisterCXXConversionDecl(nb::module_ &m);
  RegisterCXXConversionDecl(m);
void RegisterCXXDestructorDecl(nb::module_ &m);
  RegisterCXXDestructorDecl(m);
void RegisterCXXRecordDecl(nb::module_ &m);
  RegisterCXXRecordDecl(m);
void RegisterClassTemplateSpecializationDecl(nb::module_ &m);
  RegisterClassTemplateSpecializationDecl(m);
void RegisterClassTemplatePartialSpecializationDecl(nb::module_ &m);
  RegisterClassTemplatePartialSpecializationDecl(m);
void RegisterStmt(nb::module_ &m);
  RegisterStmt(m);
void RegisterSwitchCase(nb::module_ &m);
  RegisterSwitchCase(m);
void RegisterSwitchStmt(nb::module_ &m);
  RegisterSwitchStmt(m);
void RegisterValueStmt(nb::module_ &m);
  RegisterValueStmt(m);
void RegisterWhileStmt(nb::module_ &m);
  RegisterWhileStmt(m);
void RegisterAsmStmt(nb::module_ &m);
  RegisterAsmStmt(m);
void RegisterAttributedStmt(nb::module_ &m);
  RegisterAttributedStmt(m);
void RegisterBreakStmt(nb::module_ &m);
  RegisterBreakStmt(m);
void RegisterCXXCatchStmt(nb::module_ &m);
  RegisterCXXCatchStmt(m);
void RegisterCXXForRangeStmt(nb::module_ &m);
  RegisterCXXForRangeStmt(m);
void RegisterCXXTryStmt(nb::module_ &m);
  RegisterCXXTryStmt(m);
void RegisterCapturedStmt(nb::module_ &m);
  RegisterCapturedStmt(m);
void RegisterCaseStmt(nb::module_ &m);
  RegisterCaseStmt(m);
void RegisterCompoundStmt(nb::module_ &m);
  RegisterCompoundStmt(m);
void RegisterContinueStmt(nb::module_ &m);
  RegisterContinueStmt(m);
void RegisterCoreturnStmt(nb::module_ &m);
  RegisterCoreturnStmt(m);
void RegisterCoroutineBodyStmt(nb::module_ &m);
  RegisterCoroutineBodyStmt(m);
void RegisterDeclStmt(nb::module_ &m);
  RegisterDeclStmt(m);
void RegisterDefaultStmt(nb::module_ &m);
  RegisterDefaultStmt(m);
void RegisterDoStmt(nb::module_ &m);
  RegisterDoStmt(m);
void RegisterExpr(nb::module_ &m);
  RegisterExpr(m);
void RegisterExpressionTraitExpr(nb::module_ &m);
  RegisterExpressionTraitExpr(m);
void RegisterExtVectorElementExpr(nb::module_ &m);
  RegisterExtVectorElementExpr(m);
void RegisterFixedPointLiteral(nb::module_ &m);
  RegisterFixedPointLiteral(m);
void RegisterFloatingLiteral(nb::module_ &m);
  RegisterFloatingLiteral(m);
void RegisterForStmt(nb::module_ &m);
  RegisterForStmt(m);
void RegisterFullExpr(nb::module_ &m);
  RegisterFullExpr(m);
void RegisterFunctionParmPackExpr(nb::module_ &m);
  RegisterFunctionParmPackExpr(m);
void RegisterGCCAsmStmt(nb::module_ &m);
  RegisterGCCAsmStmt(m);
void RegisterGNUNullExpr(nb::module_ &m);
  RegisterGNUNullExpr(m);
void RegisterGenericSelectionExpr(nb::module_ &m);
  RegisterGenericSelectionExpr(m);
void RegisterGotoStmt(nb::module_ &m);
  RegisterGotoStmt(m);
void RegisterIfStmt(nb::module_ &m);
  RegisterIfStmt(m);
void RegisterImaginaryLiteral(nb::module_ &m);
  RegisterImaginaryLiteral(m);
void RegisterImplicitValueInitExpr(nb::module_ &m);
  RegisterImplicitValueInitExpr(m);
void RegisterIndirectGotoStmt(nb::module_ &m);
  RegisterIndirectGotoStmt(m);
void RegisterInitListExpr(nb::module_ &m);
  RegisterInitListExpr(m);
void RegisterIntegerLiteral(nb::module_ &m);
  RegisterIntegerLiteral(m);
void RegisterLabelStmt(nb::module_ &m);
  RegisterLabelStmt(m);
void RegisterLambdaExpr(nb::module_ &m);
  RegisterLambdaExpr(m);
void RegisterMSAsmStmt(nb::module_ &m);
  RegisterMSAsmStmt(m);
void RegisterMSDependentExistsStmt(nb::module_ &m);
  RegisterMSDependentExistsStmt(m);
void RegisterMSPropertyRefExpr(nb::module_ &m);
  RegisterMSPropertyRefExpr(m);
void RegisterMSPropertySubscriptExpr(nb::module_ &m);
  RegisterMSPropertySubscriptExpr(m);
void RegisterMaterializeTemporaryExpr(nb::module_ &m);
  RegisterMaterializeTemporaryExpr(m);
void RegisterMatrixSubscriptExpr(nb::module_ &m);
  RegisterMatrixSubscriptExpr(m);
void RegisterMemberExpr(nb::module_ &m);
  RegisterMemberExpr(m);
void RegisterNoInitExpr(nb::module_ &m);
  RegisterNoInitExpr(m);
void RegisterNullStmt(nb::module_ &m);
  RegisterNullStmt(m);
void RegisterOMPArraySectionExpr(nb::module_ &m);
  RegisterOMPArraySectionExpr(m);
void RegisterOMPArrayShapingExpr(nb::module_ &m);
  RegisterOMPArrayShapingExpr(m);
void RegisterOMPCanonicalLoop(nb::module_ &m);
  RegisterOMPCanonicalLoop(m);
void RegisterOMPExecutableDirective(nb::module_ &m);
  RegisterOMPExecutableDirective(m);
void RegisterOMPFlushDirective(nb::module_ &m);
  RegisterOMPFlushDirective(m);
void RegisterOMPInteropDirective(nb::module_ &m);
  RegisterOMPInteropDirective(m);
void RegisterOMPIteratorExpr(nb::module_ &m);
  RegisterOMPIteratorExpr(m);
void RegisterOMPLoopBasedDirective(nb::module_ &m);
  RegisterOMPLoopBasedDirective(m);
void RegisterOMPLoopDirective(nb::module_ &m);
  RegisterOMPLoopDirective(m);
void RegisterOMPLoopTransformationDirective(nb::module_ &m);
  RegisterOMPLoopTransformationDirective(m);
void RegisterOMPMaskedDirective(nb::module_ &m);
  RegisterOMPMaskedDirective(m);
void RegisterOMPMaskedTaskLoopDirective(nb::module_ &m);
  RegisterOMPMaskedTaskLoopDirective(m);
void RegisterOMPMaskedTaskLoopSimdDirective(nb::module_ &m);
  RegisterOMPMaskedTaskLoopSimdDirective(m);
void RegisterOMPMasterDirective(nb::module_ &m);
  RegisterOMPMasterDirective(m);
void RegisterOMPMasterTaskLoopDirective(nb::module_ &m);
  RegisterOMPMasterTaskLoopDirective(m);
void RegisterOMPMasterTaskLoopSimdDirective(nb::module_ &m);
  RegisterOMPMasterTaskLoopSimdDirective(m);
void RegisterOMPMetaDirective(nb::module_ &m);
  RegisterOMPMetaDirective(m);
void RegisterOMPOrderedDirective(nb::module_ &m);
  RegisterOMPOrderedDirective(m);
void RegisterOMPParallelDirective(nb::module_ &m);
  RegisterOMPParallelDirective(m);
void RegisterOMPParallelForDirective(nb::module_ &m);
  RegisterOMPParallelForDirective(m);
void RegisterOMPParallelForSimdDirective(nb::module_ &m);
  RegisterOMPParallelForSimdDirective(m);
void RegisterOMPParallelGenericLoopDirective(nb::module_ &m);
  RegisterOMPParallelGenericLoopDirective(m);
void RegisterOMPParallelMaskedDirective(nb::module_ &m);
  RegisterOMPParallelMaskedDirective(m);
void RegisterOMPParallelMaskedTaskLoopDirective(nb::module_ &m);
  RegisterOMPParallelMaskedTaskLoopDirective(m);
void RegisterOMPParallelMaskedTaskLoopSimdDirective(nb::module_ &m);
  RegisterOMPParallelMaskedTaskLoopSimdDirective(m);
void RegisterOMPParallelMasterDirective(nb::module_ &m);
  RegisterOMPParallelMasterDirective(m);
void RegisterOMPParallelMasterTaskLoopDirective(nb::module_ &m);
  RegisterOMPParallelMasterTaskLoopDirective(m);
void RegisterOMPParallelMasterTaskLoopSimdDirective(nb::module_ &m);
  RegisterOMPParallelMasterTaskLoopSimdDirective(m);
void RegisterOMPParallelSectionsDirective(nb::module_ &m);
  RegisterOMPParallelSectionsDirective(m);
void RegisterOMPScanDirective(nb::module_ &m);
  RegisterOMPScanDirective(m);
void RegisterOMPSectionDirective(nb::module_ &m);
  RegisterOMPSectionDirective(m);
void RegisterOMPSectionsDirective(nb::module_ &m);
  RegisterOMPSectionsDirective(m);
void RegisterOMPSimdDirective(nb::module_ &m);
  RegisterOMPSimdDirective(m);
void RegisterOMPSingleDirective(nb::module_ &m);
  RegisterOMPSingleDirective(m);
void RegisterOMPTargetDataDirective(nb::module_ &m);
  RegisterOMPTargetDataDirective(m);
void RegisterOMPTargetDirective(nb::module_ &m);
  RegisterOMPTargetDirective(m);
void RegisterOMPTargetEnterDataDirective(nb::module_ &m);
  RegisterOMPTargetEnterDataDirective(m);
void RegisterOMPTargetExitDataDirective(nb::module_ &m);
  RegisterOMPTargetExitDataDirective(m);
void RegisterOMPTargetParallelDirective(nb::module_ &m);
  RegisterOMPTargetParallelDirective(m);
void RegisterOMPTargetParallelForDirective(nb::module_ &m);
  RegisterOMPTargetParallelForDirective(m);
void RegisterOMPTargetParallelForSimdDirective(nb::module_ &m);
  RegisterOMPTargetParallelForSimdDirective(m);
void RegisterOMPTargetParallelGenericLoopDirective(nb::module_ &m);
  RegisterOMPTargetParallelGenericLoopDirective(m);
void RegisterOMPTargetSimdDirective(nb::module_ &m);
  RegisterOMPTargetSimdDirective(m);
void RegisterOMPTargetTeamsDirective(nb::module_ &m);
  RegisterOMPTargetTeamsDirective(m);
void RegisterOMPTargetTeamsDistributeDirective(nb::module_ &m);
  RegisterOMPTargetTeamsDistributeDirective(m);
void RegisterOMPTargetTeamsDistributeParallelForDirective(nb::module_ &m);
  RegisterOMPTargetTeamsDistributeParallelForDirective(m);
void RegisterOMPTargetTeamsDistributeParallelForSimdDirective(nb::module_ &m);
  RegisterOMPTargetTeamsDistributeParallelForSimdDirective(m);
void RegisterOMPTargetTeamsDistributeSimdDirective(nb::module_ &m);
  RegisterOMPTargetTeamsDistributeSimdDirective(m);
void RegisterOMPTargetTeamsGenericLoopDirective(nb::module_ &m);
  RegisterOMPTargetTeamsGenericLoopDirective(m);
void RegisterOMPTargetUpdateDirective(nb::module_ &m);
  RegisterOMPTargetUpdateDirective(m);
void RegisterOMPTaskDirective(nb::module_ &m);
  RegisterOMPTaskDirective(m);
void RegisterOMPTaskLoopDirective(nb::module_ &m);
  RegisterOMPTaskLoopDirective(m);
void RegisterOMPTaskLoopSimdDirective(nb::module_ &m);
  RegisterOMPTaskLoopSimdDirective(m);
void RegisterOMPTaskgroupDirective(nb::module_ &m);
  RegisterOMPTaskgroupDirective(m);
void RegisterOMPTaskwaitDirective(nb::module_ &m);
  RegisterOMPTaskwaitDirective(m);
void RegisterOMPTaskyieldDirective(nb::module_ &m);
  RegisterOMPTaskyieldDirective(m);
void RegisterOMPTeamsDirective(nb::module_ &m);
  RegisterOMPTeamsDirective(m);
void RegisterOMPTeamsDistributeDirective(nb::module_ &m);
  RegisterOMPTeamsDistributeDirective(m);
void RegisterOMPTeamsDistributeParallelForDirective(nb::module_ &m);
  RegisterOMPTeamsDistributeParallelForDirective(m);
void RegisterOMPTeamsDistributeParallelForSimdDirective(nb::module_ &m);
  RegisterOMPTeamsDistributeParallelForSimdDirective(m);
void RegisterOMPTeamsDistributeSimdDirective(nb::module_ &m);
  RegisterOMPTeamsDistributeSimdDirective(m);
void RegisterOMPTeamsGenericLoopDirective(nb::module_ &m);
  RegisterOMPTeamsGenericLoopDirective(m);
void RegisterOMPTileDirective(nb::module_ &m);
  RegisterOMPTileDirective(m);
void RegisterOMPUnrollDirective(nb::module_ &m);
  RegisterOMPUnrollDirective(m);
void RegisterObjCArrayLiteral(nb::module_ &m);
  RegisterObjCArrayLiteral(m);
void RegisterObjCAtCatchStmt(nb::module_ &m);
  RegisterObjCAtCatchStmt(m);
void RegisterObjCAtFinallyStmt(nb::module_ &m);
  RegisterObjCAtFinallyStmt(m);
void RegisterObjCAtSynchronizedStmt(nb::module_ &m);
  RegisterObjCAtSynchronizedStmt(m);
void RegisterObjCAtThrowStmt(nb::module_ &m);
  RegisterObjCAtThrowStmt(m);
void RegisterObjCAtTryStmt(nb::module_ &m);
  RegisterObjCAtTryStmt(m);
void RegisterObjCAutoreleasePoolStmt(nb::module_ &m);
  RegisterObjCAutoreleasePoolStmt(m);
void RegisterObjCAvailabilityCheckExpr(nb::module_ &m);
  RegisterObjCAvailabilityCheckExpr(m);
void RegisterObjCBoolLiteralExpr(nb::module_ &m);
  RegisterObjCBoolLiteralExpr(m);
void RegisterObjCBoxedExpr(nb::module_ &m);
  RegisterObjCBoxedExpr(m);
void RegisterObjCDictionaryLiteral(nb::module_ &m);
  RegisterObjCDictionaryLiteral(m);
void RegisterObjCEncodeExpr(nb::module_ &m);
  RegisterObjCEncodeExpr(m);
void RegisterObjCForCollectionStmt(nb::module_ &m);
  RegisterObjCForCollectionStmt(m);
void RegisterObjCIndirectCopyRestoreExpr(nb::module_ &m);
  RegisterObjCIndirectCopyRestoreExpr(m);
void RegisterObjCIsaExpr(nb::module_ &m);
  RegisterObjCIsaExpr(m);
void RegisterObjCIvarRefExpr(nb::module_ &m);
  RegisterObjCIvarRefExpr(m);
void RegisterObjCMessageExpr(nb::module_ &m);
  RegisterObjCMessageExpr(m);
void RegisterObjCPropertyRefExpr(nb::module_ &m);
  RegisterObjCPropertyRefExpr(m);
void RegisterObjCProtocolExpr(nb::module_ &m);
  RegisterObjCProtocolExpr(m);
void RegisterObjCSelectorExpr(nb::module_ &m);
  RegisterObjCSelectorExpr(m);
void RegisterObjCStringLiteral(nb::module_ &m);
  RegisterObjCStringLiteral(m);
void RegisterObjCSubscriptRefExpr(nb::module_ &m);
  RegisterObjCSubscriptRefExpr(m);
void RegisterOffsetOfExpr(nb::module_ &m);
  RegisterOffsetOfExpr(m);
void RegisterOpaqueValueExpr(nb::module_ &m);
  RegisterOpaqueValueExpr(m);
void RegisterOverloadExpr(nb::module_ &m);
  RegisterOverloadExpr(m);
void RegisterPackExpansionExpr(nb::module_ &m);
  RegisterPackExpansionExpr(m);
void RegisterParenExpr(nb::module_ &m);
  RegisterParenExpr(m);
void RegisterParenListExpr(nb::module_ &m);
  RegisterParenListExpr(m);
void RegisterPredefinedExpr(nb::module_ &m);
  RegisterPredefinedExpr(m);
void RegisterPseudoObjectExpr(nb::module_ &m);
  RegisterPseudoObjectExpr(m);
void RegisterRecoveryExpr(nb::module_ &m);
  RegisterRecoveryExpr(m);
void RegisterRequiresExpr(nb::module_ &m);
  RegisterRequiresExpr(m);
void RegisterReturnStmt(nb::module_ &m);
  RegisterReturnStmt(m);
void RegisterSEHExceptStmt(nb::module_ &m);
  RegisterSEHExceptStmt(m);
void RegisterSEHFinallyStmt(nb::module_ &m);
  RegisterSEHFinallyStmt(m);
void RegisterSEHLeaveStmt(nb::module_ &m);
  RegisterSEHLeaveStmt(m);
void RegisterSEHTryStmt(nb::module_ &m);
  RegisterSEHTryStmt(m);
void RegisterSYCLUniqueStableNameExpr(nb::module_ &m);
  RegisterSYCLUniqueStableNameExpr(m);
void RegisterShuffleVectorExpr(nb::module_ &m);
  RegisterShuffleVectorExpr(m);
void RegisterSizeOfPackExpr(nb::module_ &m);
  RegisterSizeOfPackExpr(m);
void RegisterSourceLocExpr(nb::module_ &m);
  RegisterSourceLocExpr(m);
void RegisterStmtExpr(nb::module_ &m);
  RegisterStmtExpr(m);
void RegisterStringLiteral(nb::module_ &m);
  RegisterStringLiteral(m);
void RegisterSubstNonTypeTemplateParmExpr(nb::module_ &m);
  RegisterSubstNonTypeTemplateParmExpr(m);
void RegisterSubstNonTypeTemplateParmPackExpr(nb::module_ &m);
  RegisterSubstNonTypeTemplateParmPackExpr(m);
void RegisterTypeTraitExpr(nb::module_ &m);
  RegisterTypeTraitExpr(m);
void RegisterTypoExpr(nb::module_ &m);
  RegisterTypoExpr(m);
void RegisterUnaryExprOrTypeTraitExpr(nb::module_ &m);
  RegisterUnaryExprOrTypeTraitExpr(m);
void RegisterUnaryOperator(nb::module_ &m);
  RegisterUnaryOperator(m);
void RegisterUnresolvedLookupExpr(nb::module_ &m);
  RegisterUnresolvedLookupExpr(m);
void RegisterUnresolvedMemberExpr(nb::module_ &m);
  RegisterUnresolvedMemberExpr(m);
void RegisterVAArgExpr(nb::module_ &m);
  RegisterVAArgExpr(m);
void RegisterAbstractConditionalOperator(nb::module_ &m);
  RegisterAbstractConditionalOperator(m);
void RegisterAddrLabelExpr(nb::module_ &m);
  RegisterAddrLabelExpr(m);
void RegisterArrayInitIndexExpr(nb::module_ &m);
  RegisterArrayInitIndexExpr(m);
void RegisterArrayInitLoopExpr(nb::module_ &m);
  RegisterArrayInitLoopExpr(m);
void RegisterArraySubscriptExpr(nb::module_ &m);
  RegisterArraySubscriptExpr(m);
void RegisterArrayTypeTraitExpr(nb::module_ &m);
  RegisterArrayTypeTraitExpr(m);
void RegisterAsTypeExpr(nb::module_ &m);
  RegisterAsTypeExpr(m);
void RegisterAtomicExpr(nb::module_ &m);
  RegisterAtomicExpr(m);
void RegisterBinaryConditionalOperator(nb::module_ &m);
  RegisterBinaryConditionalOperator(m);
void RegisterBinaryOperator(nb::module_ &m);
  RegisterBinaryOperator(m);
void RegisterBlockExpr(nb::module_ &m);
  RegisterBlockExpr(m);
void RegisterCXXBindTemporaryExpr(nb::module_ &m);
  RegisterCXXBindTemporaryExpr(m);
void RegisterCXXBoolLiteralExpr(nb::module_ &m);
  RegisterCXXBoolLiteralExpr(m);
void RegisterCXXConstructExpr(nb::module_ &m);
  RegisterCXXConstructExpr(m);
void RegisterCXXDefaultArgExpr(nb::module_ &m);
  RegisterCXXDefaultArgExpr(m);
void RegisterCXXDefaultInitExpr(nb::module_ &m);
  RegisterCXXDefaultInitExpr(m);
void RegisterCXXDeleteExpr(nb::module_ &m);
  RegisterCXXDeleteExpr(m);
void RegisterCXXDependentScopeMemberExpr(nb::module_ &m);
  RegisterCXXDependentScopeMemberExpr(m);
void RegisterCXXFoldExpr(nb::module_ &m);
  RegisterCXXFoldExpr(m);
void RegisterCXXInheritedCtorInitExpr(nb::module_ &m);
  RegisterCXXInheritedCtorInitExpr(m);
void RegisterCXXNewExpr(nb::module_ &m);
  RegisterCXXNewExpr(m);
void RegisterCXXNoexceptExpr(nb::module_ &m);
  RegisterCXXNoexceptExpr(m);
void RegisterCXXNullPtrLiteralExpr(nb::module_ &m);
  RegisterCXXNullPtrLiteralExpr(m);
void RegisterCXXParenListInitExpr(nb::module_ &m);
  RegisterCXXParenListInitExpr(m);
void RegisterCXXPseudoDestructorExpr(nb::module_ &m);
  RegisterCXXPseudoDestructorExpr(m);
void RegisterCXXRewrittenBinaryOperator(nb::module_ &m);
  RegisterCXXRewrittenBinaryOperator(m);
void RegisterCXXScalarValueInitExpr(nb::module_ &m);
  RegisterCXXScalarValueInitExpr(m);
void RegisterCXXStdInitializerListExpr(nb::module_ &m);
  RegisterCXXStdInitializerListExpr(m);
void RegisterCXXTemporaryObjectExpr(nb::module_ &m);
  RegisterCXXTemporaryObjectExpr(m);
void RegisterCXXThisExpr(nb::module_ &m);
  RegisterCXXThisExpr(m);
void RegisterCXXThrowExpr(nb::module_ &m);
  RegisterCXXThrowExpr(m);
void RegisterCXXTypeidExpr(nb::module_ &m);
  RegisterCXXTypeidExpr(m);
void RegisterCXXUnresolvedConstructExpr(nb::module_ &m);
  RegisterCXXUnresolvedConstructExpr(m);
void RegisterCXXUuidofExpr(nb::module_ &m);
  RegisterCXXUuidofExpr(m);
void RegisterCallExpr(nb::module_ &m);
  RegisterCallExpr(m);
void RegisterCastExpr(nb::module_ &m);
  RegisterCastExpr(m);
void RegisterCharacterLiteral(nb::module_ &m);
  RegisterCharacterLiteral(m);
void RegisterChooseExpr(nb::module_ &m);
  RegisterChooseExpr(m);
void RegisterCompoundAssignOperator(nb::module_ &m);
  RegisterCompoundAssignOperator(m);
void RegisterCompoundLiteralExpr(nb::module_ &m);
  RegisterCompoundLiteralExpr(m);
void RegisterConceptSpecializationExpr(nb::module_ &m);
  RegisterConceptSpecializationExpr(m);
void RegisterConditionalOperator(nb::module_ &m);
  RegisterConditionalOperator(m);
void RegisterConstantExpr(nb::module_ &m);
  RegisterConstantExpr(m);
void RegisterConvertVectorExpr(nb::module_ &m);
  RegisterConvertVectorExpr(m);
void RegisterCoroutineSuspendExpr(nb::module_ &m);
  RegisterCoroutineSuspendExpr(m);
void RegisterCoyieldExpr(nb::module_ &m);
  RegisterCoyieldExpr(m);
void RegisterDeclRefExpr(nb::module_ &m);
  RegisterDeclRefExpr(m);
void RegisterDependentCoawaitExpr(nb::module_ &m);
  RegisterDependentCoawaitExpr(m);
void RegisterDependentScopeDeclRefExpr(nb::module_ &m);
  RegisterDependentScopeDeclRefExpr(m);
void RegisterDesignatedInitExpr(nb::module_ &m);
  RegisterDesignatedInitExpr(m);
void RegisterDesignatedInitUpdateExpr(nb::module_ &m);
  RegisterDesignatedInitUpdateExpr(m);
void RegisterExplicitCastExpr(nb::module_ &m);
  RegisterExplicitCastExpr(m);
void RegisterExprWithCleanups(nb::module_ &m);
  RegisterExprWithCleanups(m);
void RegisterImplicitCastExpr(nb::module_ &m);
  RegisterImplicitCastExpr(m);
void RegisterOMPAtomicDirective(nb::module_ &m);
  RegisterOMPAtomicDirective(m);
void RegisterOMPBarrierDirective(nb::module_ &m);
  RegisterOMPBarrierDirective(m);
void RegisterOMPCancelDirective(nb::module_ &m);
  RegisterOMPCancelDirective(m);
void RegisterOMPCancellationPointDirective(nb::module_ &m);
  RegisterOMPCancellationPointDirective(m);
void RegisterOMPCriticalDirective(nb::module_ &m);
  RegisterOMPCriticalDirective(m);
void RegisterOMPDepobjDirective(nb::module_ &m);
  RegisterOMPDepobjDirective(m);
void RegisterOMPDispatchDirective(nb::module_ &m);
  RegisterOMPDispatchDirective(m);
void RegisterOMPDistributeDirective(nb::module_ &m);
  RegisterOMPDistributeDirective(m);
void RegisterOMPDistributeParallelForDirective(nb::module_ &m);
  RegisterOMPDistributeParallelForDirective(m);
void RegisterOMPDistributeParallelForSimdDirective(nb::module_ &m);
  RegisterOMPDistributeParallelForSimdDirective(m);
void RegisterOMPDistributeSimdDirective(nb::module_ &m);
  RegisterOMPDistributeSimdDirective(m);
void RegisterOMPErrorDirective(nb::module_ &m);
  RegisterOMPErrorDirective(m);
void RegisterOMPForDirective(nb::module_ &m);
  RegisterOMPForDirective(m);
void RegisterOMPForSimdDirective(nb::module_ &m);
  RegisterOMPForSimdDirective(m);
void RegisterOMPGenericLoopDirective(nb::module_ &m);
  RegisterOMPGenericLoopDirective(m);
void RegisterObjCBridgedCastExpr(nb::module_ &m);
  RegisterObjCBridgedCastExpr(m);
void RegisterUserDefinedLiteral(nb::module_ &m);
  RegisterUserDefinedLiteral(m);
void RegisterBuiltinBitCastExpr(nb::module_ &m);
  RegisterBuiltinBitCastExpr(m);
void RegisterCStyleCastExpr(nb::module_ &m);
  RegisterCStyleCastExpr(m);
void RegisterCUDAKernelCallExpr(nb::module_ &m);
  RegisterCUDAKernelCallExpr(m);
void RegisterCXXFunctionalCastExpr(nb::module_ &m);
  RegisterCXXFunctionalCastExpr(m);
void RegisterCXXMemberCallExpr(nb::module_ &m);
  RegisterCXXMemberCallExpr(m);
void RegisterCXXNamedCastExpr(nb::module_ &m);
  RegisterCXXNamedCastExpr(m);
void RegisterCXXOperatorCallExpr(nb::module_ &m);
  RegisterCXXOperatorCallExpr(m);
void RegisterCXXReinterpretCastExpr(nb::module_ &m);
  RegisterCXXReinterpretCastExpr(m);
void RegisterCXXStaticCastExpr(nb::module_ &m);
  RegisterCXXStaticCastExpr(m);
void RegisterCoawaitExpr(nb::module_ &m);
  RegisterCoawaitExpr(m);
void RegisterCXXAddrspaceCastExpr(nb::module_ &m);
  RegisterCXXAddrspaceCastExpr(m);
void RegisterCXXConstCastExpr(nb::module_ &m);
  RegisterCXXConstCastExpr(m);
void RegisterCXXDynamicCastExpr(nb::module_ &m);
  RegisterCXXDynamicCastExpr(m);
void RegisterType(nb::module_ &m);
  RegisterType(m);
void RegisterTypeOfExprType(nb::module_ &m);
  RegisterTypeOfExprType(m);
void RegisterTypeOfType(nb::module_ &m);
  RegisterTypeOfType(m);
void RegisterTypedefType(nb::module_ &m);
  RegisterTypedefType(m);
void RegisterUnaryTransformType(nb::module_ &m);
  RegisterUnaryTransformType(m);
void RegisterUnresolvedUsingType(nb::module_ &m);
  RegisterUnresolvedUsingType(m);
void RegisterUsingType(nb::module_ &m);
  RegisterUsingType(m);
void RegisterVectorType(nb::module_ &m);
  RegisterVectorType(m);
void RegisterTypeWithKeyword(nb::module_ &m);
  RegisterTypeWithKeyword(m);
void RegisterAdjustedType(nb::module_ &m);
  RegisterAdjustedType(m);
void RegisterArrayType(nb::module_ &m);
  RegisterArrayType(m);
void RegisterAtomicType(nb::module_ &m);
  RegisterAtomicType(m);
void RegisterAttributedType(nb::module_ &m);
  RegisterAttributedType(m);
void RegisterBTFTagAttributedType(nb::module_ &m);
  RegisterBTFTagAttributedType(m);
void RegisterBitIntType(nb::module_ &m);
  RegisterBitIntType(m);
void RegisterBlockPointerType(nb::module_ &m);
  RegisterBlockPointerType(m);
void RegisterBuiltinType(nb::module_ &m);
  RegisterBuiltinType(m);
void RegisterComplexType(nb::module_ &m);
  RegisterComplexType(m);
void RegisterConstantArrayType(nb::module_ &m);
  RegisterConstantArrayType(m);
void RegisterDecayedType(nb::module_ &m);
  RegisterDecayedType(m);
void RegisterDecltypeType(nb::module_ &m);
  RegisterDecltypeType(m);
void RegisterDeducedType(nb::module_ &m);
  RegisterDeducedType(m);
void RegisterDependentAddressSpaceType(nb::module_ &m);
  RegisterDependentAddressSpaceType(m);
void RegisterDependentBitIntType(nb::module_ &m);
  RegisterDependentBitIntType(m);
void RegisterDependentNameType(nb::module_ &m);
  RegisterDependentNameType(m);
void RegisterDependentSizedArrayType(nb::module_ &m);
  RegisterDependentSizedArrayType(m);
void RegisterDependentSizedExtVectorType(nb::module_ &m);
  RegisterDependentSizedExtVectorType(m);
void RegisterDependentTemplateSpecializationType(nb::module_ &m);
  RegisterDependentTemplateSpecializationType(m);
void RegisterDependentVectorType(nb::module_ &m);
  RegisterDependentVectorType(m);
void RegisterElaboratedType(nb::module_ &m);
  RegisterElaboratedType(m);
void RegisterExtVectorType(nb::module_ &m);
  RegisterExtVectorType(m);
void RegisterFunctionType(nb::module_ &m);
  RegisterFunctionType(m);
void RegisterIncompleteArrayType(nb::module_ &m);
  RegisterIncompleteArrayType(m);
void RegisterInjectedClassNameType(nb::module_ &m);
  RegisterInjectedClassNameType(m);
void RegisterMacroQualifiedType(nb::module_ &m);
  RegisterMacroQualifiedType(m);
void RegisterMatrixType(nb::module_ &m);
  RegisterMatrixType(m);
void RegisterMemberPointerType(nb::module_ &m);
  RegisterMemberPointerType(m);
void RegisterObjCObjectPointerType(nb::module_ &m);
  RegisterObjCObjectPointerType(m);
void RegisterObjCObjectType(nb::module_ &m);
  RegisterObjCObjectType(m);
void RegisterObjCTypeParamType(nb::module_ &m);
  RegisterObjCTypeParamType(m);
void RegisterPackExpansionType(nb::module_ &m);
  RegisterPackExpansionType(m);
void RegisterParenType(nb::module_ &m);
  RegisterParenType(m);
void RegisterPipeType(nb::module_ &m);
  RegisterPipeType(m);
void RegisterPointerType(nb::module_ &m);
  RegisterPointerType(m);
void RegisterQualifiedType(nb::module_ &m);
  RegisterQualifiedType(m);
void RegisterReferenceType(nb::module_ &m);
  RegisterReferenceType(m);
void RegisterSubstTemplateTypeParmPackType(nb::module_ &m);
  RegisterSubstTemplateTypeParmPackType(m);
void RegisterSubstTemplateTypeParmType(nb::module_ &m);
  RegisterSubstTemplateTypeParmType(m);
void RegisterTagType(nb::module_ &m);
  RegisterTagType(m);
void RegisterTemplateSpecializationType(nb::module_ &m);
  RegisterTemplateSpecializationType(m);
void RegisterTemplateTypeParmType(nb::module_ &m);
  RegisterTemplateTypeParmType(m);
void RegisterVariableArrayType(nb::module_ &m);
  RegisterVariableArrayType(m);
void RegisterAutoType(nb::module_ &m);
  RegisterAutoType(m);
void RegisterConstantMatrixType(nb::module_ &m);
  RegisterConstantMatrixType(m);
void RegisterDeducedTemplateSpecializationType(nb::module_ &m);
  RegisterDeducedTemplateSpecializationType(m);
void RegisterDependentSizedMatrixType(nb::module_ &m);
  RegisterDependentSizedMatrixType(m);
void RegisterEnumType(nb::module_ &m);
  RegisterEnumType(m);
void RegisterFunctionNoProtoType(nb::module_ &m);
  RegisterFunctionNoProtoType(m);
void RegisterFunctionProtoType(nb::module_ &m);
  RegisterFunctionProtoType(m);
void RegisterLValueReferenceType(nb::module_ &m);
  RegisterLValueReferenceType(m);
void RegisterObjCInterfaceType(nb::module_ &m);
  RegisterObjCInterfaceType(m);
void RegisterRValueReferenceType(nb::module_ &m);
  RegisterRValueReferenceType(m);
void RegisterRecordType(nb::module_ &m);
  RegisterRecordType(m);
}
} // namespace pasta
